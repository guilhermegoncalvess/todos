{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [editing, setEditing] = useState('');\n  const [todos, setTodos] = useState([]);\n  const activeTodoCount = 0;\n  useEffect(() => {\n    api.get('/tasks').then(response => {\n      setTodos(response.data);\n    });\n    console.log(todos);\n  }, []);\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    api.post('/tasks', {\n      title: event.target.value,\n      completed: false\n    }).then(response => {\n      const todo = response.data;\n      setTodos([...todos, todo]);\n      console.log(todos);\n    });\n    setNewTodo(\"\");\n    console.log(newTodo);\n  }\n\n  function handleCheckChangeTodo(todo) {\n    const {\n      id,\n      completed\n    } = todo;\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    });\n    api.put(`/tasks/${todo.id}`, {\n      id,\n      completed: !completed\n    }).then(response => {\n      const todo = response.data;\n      setTodos([todos[todoIndex], todo]);\n      console.log(todos);\n    });\n  }\n\n  function onEdit(todo) {\n    setEditing(todo.title);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        onKeyDown: e => handleNewTodo(e) // onKeyDown={ e => (e) }\n        ,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\" // checked={activeTodoCount === 0}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"toggle\",\n            type: \"checkbox\",\n            checked: todo.completed,\n            onChange: e => handleCheckChangeTodo(todo)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            onDoubleClick: e => setEditing(todo.title),\n            children: todo.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: \"editField\",\n          className: \"edit\" // key={todo.id}\n          ,\n          onDoubleClick: e => setEditing(todo.title),\n          value: editing //   // onBlur={this.handleSubmit}\n          ,\n          onChange: e => setEditing(e.target.value) //   // onKeyDown={e => handleNewTodo(e)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; // <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\n\n\n_s(Dashboard, \"Sdod/d9KlIafU2DgC6e5Uoe0UQg=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","api","Dashboard","newTodo","setNewTodo","editing","setEditing","todos","setTodos","activeTodoCount","get","then","response","data","console","log","handleNewTodo","event","key","preventDefault","post","title","target","value","completed","todo","handleCheckChangeTodo","id","todoIndex","findIndex","put","onEdit","e","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newTodo, setNewTodo] = useState('');\n    const [editing, setEditing] = useState('');\n    const [ todos, setTodos] = useState<Todo[]>([]) ;\n\n    const activeTodoCount = 0;\n\n    useEffect(() => {\n      api.get<Todo[]>('/tasks').then(response => {\n        \n        setTodos(response.data)\n      }); \n      console.log(todos)\n    }, [])\n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return\n        }\n        event.preventDefault();\n\n        api.post('/tasks', {title: event.target.value, completed: false }).then( response => {\n          const todo = response.data;\n\n          setTodos([...todos, todo]);\n          console.log(todos);\n        });\n\n        setNewTodo(\"\")\n        console.log(newTodo);\n    }\n\n    function handleCheckChangeTodo(todo: Todo){\n\n      const { id, completed } = todo;\n\n      const todoIndex = todos.findIndex( todo => {\n        return todo.id === id\n      });\n\n      \n      api.put(`/tasks/${todo.id}`, {id, completed: !completed }).then( response => {\n          const todo = response.data;\n\n          setTodos([todos[todoIndex], todo]);\n          console.log(todos);\n        });\n    }\n\n    function onEdit(todo: Todo) {\n      setEditing(todo.title)\n    }\n    return ( \n        <>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value = {newTodo}\n            onChange={ e => setNewTodo(e.target.value)}\n            onKeyDown = {(e) => handleNewTodo(e)}\n            \n            // onKeyDown={ e => (e) }\n            autoFocus={true}\n          />\n        </header>\n        <section className=\"main\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"toggle-all\"\n\t\t\t\t\t\t\tclassName=\"toggle-all\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t// checked={activeTodoCount === 0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\thtmlFor=\"toggle-all\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ul className=\"todo-list\">\n              { todos.map( todo => \n                <div className=\"view\">\n                  <input key={todo.id} \n                        className=\"toggle\" \n                        type=\"checkbox\" checked={todo.completed} \n                        onChange={ e => handleCheckChangeTodo(todo)}>\n                          \n                  </input>\n                  <label onDoubleClick={e => setEditing(todo.title)}>\n                      {todo.title}\n\t\t\t\t\t\t      </label>\n                </div>,\n                 ( <input \n                    ref=\"editField\"\n                    className=\"edit\"\n                    // key={todo.id}\n                    onDoubleClick={ e => setEditing(todo.title)}\n                    value={editing}\n                  //   // onBlur={this.handleSubmit}\n                    onChange= {e => setEditing(e.target.value)}\n                  //   // onKeyDown={e => handleNewTodo(e)}\n                  />)\n                \n              \n              )}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\n        {/* <ul >\n        </ul> */}\n        \n      </>\n    )\n}\n \n        \n// <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}