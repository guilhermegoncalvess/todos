{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [todos, setTodo] = useState([]);\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    console.log(event.target.value);\n    const response = await api.post('/tasks', {\n      title: event.target.value,\n      completed: false\n    });\n    const todo = response.data;\n    setTodo([...todos, todo]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        onKeyDown: e => handleNewTodo(e) // onKeyDown={ e => (e) }\n        // autoFocus={true}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\" //   onChange={ e => this.toggleAll(e) }\n        //   checked={activeTodoCount === 0}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\",\n        children: \"Mark all as complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: todos.map(todo => {\n          /*#__PURE__*/\n          _jsxDEV(\"li\", {\n            className: \"li.completed\",\n            children: todo.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"255Xwj7pa9RBQk7FUpNsoM0vJzU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useState","api","Dashboard","newTodo","setNewTodo","todos","setTodo","handleNewTodo","event","key","preventDefault","console","log","target","value","response","post","title","completed","todo","data","e","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,OAAOC,GAAP,MAAgB,oBAAhB;;;AAUA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAEK,KAAF,EAASC,OAAT,IAAoBN,QAAQ,CAAS,EAAT,CAAlC;;AAEA,iBAAeO,aAAf,CAA6BC,KAA7B,EAAwD;AACpD,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB;AACD;;AACDD,IAAAA,KAAK,CAACE,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAN,CAAaC,KAAzB;AAEA,UAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAJ,CAAe,QAAf,EAAyB;AAACC,MAAAA,KAAK,EAAET,KAAK,CAACK,MAAN,CAAaC,KAArB;AAA4BI,MAAAA,SAAS,EAAE;AAAvC,KAAzB,CAAvB;AACA,UAAMC,IAAI,GAAGJ,QAAQ,CAACK,IAAtB;AAEAd,IAAAA,OAAO,CAAC,CAAC,GAAGD,KAAJ,EAAWc,IAAX,CAAD,CAAP;AACH;;AAED,sBACI;AAAA,4BACA;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,SAAS,EAAC,UAFZ;AAGE,QAAA,WAAW,EAAC,wBAHd;AAIE,QAAA,SAAS,EAAKE,CAAD,IAAOd,aAAa,CAACc,CAAD,CAJnC,CAKE;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAcA;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA,8BACA;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,SAAS,EAAC,YAFZ;AAGE,QAAA,IAAI,EAAC,UAHP,CAIA;AACA;;AALA;AAAA;AAAA;AAAA;AAAA,cADA,eAQA;AACE,QAAA,OAAO,EAAC,YADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARA,eAaA;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBAEEhB,KAAK,CAACiB,GAAN,CAAWH,IAAI,IAAI;AACjB;AAAA;AAAI,YAAA,SAAS,EAAC,cAAd;AAAA,sBAA+BA,IAAI,CAACF;AAApC;AAAA;AAAA;AAAA;AAAA;AAED,SAHD;AAFF;AAAA;AAAA;AAAA;AAAA,cAbA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH,CA1DD;;GAAMf,S;;KAAAA,S;AA4DN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newTodo, setNewTodo] = useState('');\n    const [ todos, setTodo] = useState<Todo[]>([]) ;\n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return;\n        }\n        event.preventDefault();\n        console.log(event.target.value);\n\n        const response = await api.post<Todo>('/tasks', {title: event.target.value, completed: false});\n        const todo = response.data;\n\n        setTodo([...todos, todo])\n    }\n\n    return ( \n        <div>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown = {(e) => handleNewTodo(e)}\n            // onKeyDown={ e => (e) }\n            // autoFocus={true}\n          />\n        </header>\n        \n        \n        <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          type=\"checkbox\"\n        //   onChange={ e => this.toggleAll(e) }\n        //   checked={activeTodoCount === 0}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n        >\n          Mark all as complete\n        </label>\n        <ul className=\"todo-list\">\n        {\n          todos.map( todo => {\n            <li className=\"li.completed\" >{todo.title}</li>\n\n          })\n        }\n        </ul>\n\n      </section>\n      </div>\n    )\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}