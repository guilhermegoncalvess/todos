{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [editing, setEditing] = useState('');\n  const [todos, setTodos] = useState([]);\n  const activeTodoCount = 0;\n  useEffect(() => {\n    api.get('/tasks').then(response => {\n      setTodos(response.data);\n    });\n    console.log(todos);\n  }, []);\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    api.post('/tasks', {\n      title: event.target.value,\n      completed: false\n    }).then(response => {\n      const todo = response.data;\n      setTodos([...todos, todo]);\n      console.log(todos);\n    });\n    setNewTodo(\"\");\n    console.log(newTodo);\n  }\n\n  function handleCheckChangeTodo(todo) {\n    const {\n      id,\n      completed\n    } = todo;\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    });\n    todos[todoIndex].completed = !completed;\n    setTodos([...todos]);\n    api.put(`/tasks/${id}`, {\n      id,\n      completed: !completed\n    }).then(response => {\n      const todo = response.data;\n      console.log(todo);\n    });\n  }\n\n  function handleRemoveTodo(id) {\n    const todoIndex = todos.findIndex(todo => {\n      return todo.id === id;\n    });\n    const todosCopy = todos;\n    todosCopy.splice(todoIndex, 1);\n    setTodos(todosCopy);\n    api.delete(`/tasks/${id}`).then(response => {\n      const todo = response.data;\n      console.log(todo);\n    });\n  }\n\n  function onEdit(todo) {\n    setEditing(todo.title);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        onKeyDown: e => handleNewTodo(e),\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\",\n        checked: activeTodoCount === 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"toggle\",\n              type: \"checkbox\",\n              checked: todo.completed,\n              onChange: e => handleCheckChangeTodo(todo)\n            }, todo.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              onDoubleClick: e => setEditing(todo.title),\n              children: todo.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"destroy\",\n              onClick: e => handleRemoveTodo(todo.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"edit\",\n            onDoubleClick: e => setEditing(todo.title),\n            value: editing // onBlur={this.handleSubmit}\n            ,\n            onChange: e => setEditing(e.target.value) // onKeyDown={e => handleNewTodo(e)}\n\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"Sdod/d9KlIafU2DgC6e5Uoe0UQg=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","api","Dashboard","newTodo","setNewTodo","editing","setEditing","todos","setTodos","activeTodoCount","get","then","response","data","console","log","handleNewTodo","event","key","preventDefault","post","title","target","value","completed","todo","handleCheckChangeTodo","id","todoIndex","findIndex","put","handleRemoveTodo","todosCopy","splice","delete","onEdit","e","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n\n    const [newTodo, setNewTodo] = useState('');\n    const [editing, setEditing] = useState('');\n    const [ todos, setTodos] = useState<Todo[]>([]) ;\n\n    const activeTodoCount = 0;\n\n    useEffect(() => {\n      api.get<Todo[]>('/tasks').then(response => {\n        \n        setTodos(response.data)\n      }); \n      console.log(todos)\n    }, [])\n\n    \n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return\n        }\n        event.preventDefault();\n\n        api.post('/tasks', {title: event.target.value, completed: false }).then( response => {\n          const todo = response.data;\n\n          setTodos([...todos, todo]);\n          console.log(todos);\n        });\n\n        setNewTodo(\"\")\n        console.log(newTodo);\n    }\n\n    function handleCheckChangeTodo(todo: Todo){\n\n      const { id, completed } = todo;\n\n      const todoIndex = todos.findIndex( todo => {\n        return todo.id === id\n      });\n\n      todos[todoIndex].completed = !completed;\n      setTodos([...todos]);\n      \n      api.put(`/tasks/${id}`, {id, completed: !completed }).then( response => {\n          const todo = response.data;\n          \n          console.log(todo);\n        });\n    }\n    function handleRemoveTodo(id: string){\n\n      const todoIndex = todos.findIndex( todo => {\n        return todo.id === id\n      });\n      const todosCopy = todos;\n      todosCopy.splice(todoIndex, 1);\n\n      setTodos(todosCopy)\n      api.delete(`/tasks/${id}`).then( response => {\n        const todo = response.data;\n        \n        console.log(todo);\n      });\n    }\n    \n    function onEdit(todo: Todo) {\n      setEditing(todo.title)\n    }\n\n\n    return ( \n        <>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value = {newTodo}\n            onChange={ e => setNewTodo(e.target.value)}\n            onKeyDown = {(e) => handleNewTodo(e)}\n            autoFocus={true}\n          />\n        </header>\n        <section className=\"main\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"toggle-all\"\n\t\t\t\t\t\t\tclassName=\"toggle-all\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={activeTodoCount === 0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\thtmlFor=\"toggle-all\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ul className=\"todo-list\">\n              { todos.map( todo => \n                <li >\n                  <div className=\"view\">\n                    <input key={todo.id} \n                          className=\"toggle\" \n                          type=\"checkbox\" checked={todo.completed} \n                          onChange={ e => handleCheckChangeTodo(todo)}>\n                            \n                    </input>\n                    <label onDoubleClick={e => setEditing(todo.title)}>\n                        {todo.title}\n                    </label>\n                    <button className=\"destroy\" onClick={e => handleRemoveTodo(todo.id)} />\n                  </div>\n                  <input \n                      className=\"edit\"\n                      key={todo.id}\n                      onDoubleClick={ e => setEditing(todo.title)}\n                      value={editing}\n                      // onBlur={this.handleSubmit}\n                      onChange= {e => setEditing(e.target.value)}\n                      // onKeyDown={e => handleNewTodo(e)}\n                  />\n                </li>\n              )}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\n        {/* <ul >\n        </ul> */}\n        \n      </>\n    )\n}\n \nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}