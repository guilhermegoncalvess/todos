{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [todos, setTodo] = useState([]);\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    console.log(event.target.value);\n    const response = await api.get('/tasks' // title: event.target.value, completed: false\n    );\n    const todo = response.data;\n    setTodo([...todos, todo]);\n    console.log(todo);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        onKeyDown: e => handleNewTodo(e) // onKeyDown={ e => (e) }\n        // autoFocus={true}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => {\n        /*#__PURE__*/\n        _jsxDEV(\"li\", {\n          children: todo.title\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; // <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\n\n\n_s(Dashboard, \"255Xwj7pa9RBQk7FUpNsoM0vJzU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useState","api","Dashboard","newTodo","setNewTodo","todos","setTodo","handleNewTodo","event","key","preventDefault","console","log","target","value","response","get","todo","data","e","map","title","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,OAAOC,GAAP,MAAgB,oBAAhB;;;;AAUA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAEK,KAAF,EAASC,OAAT,IAAoBN,QAAQ,CAAS,EAAT,CAAlC;;AAEA,iBAAeO,aAAf,CAA6BC,KAA7B,EAAwD;AACpD,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB;AACD;;AACDD,IAAAA,KAAK,CAACE,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAN,CAAaC,KAAzB;AAEA,UAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAJ,CAAc,QAAd,CACrB;AADqB,KAAvB;AAGA,UAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAtB;AACAZ,IAAAA,OAAO,CAAC,CAAC,GAAGD,KAAJ,EAAWY,IAAX,CAAD,CAAP;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACH;;AAGD,sBACI;AAAA,4BACA;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,SAAS,EAAC,UAFZ;AAGE,QAAA,WAAW,EAAC,wBAHd;AAIE,QAAA,SAAS,EAAKE,CAAD,IAAOZ,aAAa,CAACY,CAAD,CAJnC,CAME;AACA;;AAPF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAaA;AAAA,gBACCd,KAAK,CAACe,GAAN,CAAWH,IAAI,IAAI;AACX;AAAA;AAAA,oBAAmBA,IAAI,CAACI;AAAxB,WAASJ,IAAI,CAACK,EAAd;AAAA;AAAA;AAAA;AAAA;AACF,OAFN;AADD;AAAA;AAAA;AAAA;AAAA,YAbA;AAAA,kBADJ;AAqBH,CA1CD,C,CA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAjEMpB,S;;KAAAA,S;AAkEN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newTodo, setNewTodo] = useState('');\n    const [ todos, setTodo] = useState<Todo[]>([]) ;\n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return;\n        }\n        event.preventDefault();\n        console.log(event.target.value);\n\n        const response = await api.get<Todo>('/tasks',\n          // title: event.target.value, completed: false\n        );\n        const todo = response.data;\n        setTodo([...todos, todo])\n        console.log(todo)\n    }\n\n\n    return ( \n        <>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown = {(e) => handleNewTodo(e)}\n            \n            // onKeyDown={ e => (e) }\n            // autoFocus={true}\n          />\n        </header>\n        <ul >\n\t\t\t\t\t\t\t{ todos.map( todo => {\n                 <li key={todo.id}>{todo.title}</li>\n              })}\n        </ul>\n      </>\n    )\n}\n \n        \n// <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}