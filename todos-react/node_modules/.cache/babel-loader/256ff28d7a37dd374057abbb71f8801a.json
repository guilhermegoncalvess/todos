{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [todos, setTodos] = useState([]);\n  const activeTodoCount = 0;\n  useEffect(() => {\n    api.get('/tasks').then(response => {\n      setTodos(response.data);\n    });\n    console.log(todos);\n  }, []);\n\n  function handleSubmitTodo(evente) {}\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault(); // api.post('/tasks', {title: event.target.value, completed: false }).then( response => {\n    //   const todo = response.data;\n    //   setTodos([...todos, todo]);\n    //   console.log(todos);\n    // });\n\n    setNewTodo(\"\");\n    console.log(newTodo);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        onKeyDown: e => handleNewTodo(e) // onKeyDown={ e => (e) }\n        // autoFocus={true}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\" // checked={activeTodoCount === 0}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: todo.title\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 36\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; // <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\n\n\n_s(Dashboard, \"QPUln2XIDroAIiaRzTKxcWl3r9I=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","api","Dashboard","newTodo","setNewTodo","todos","setTodos","activeTodoCount","get","then","response","data","console","log","handleSubmitTodo","evente","handleNewTodo","event","key","preventDefault","e","target","value","map","todo","title","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,OAAOC,GAAP,MAAgB,oBAAhB;;;;AAUA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAEK,KAAF,EAASC,QAAT,IAAqBN,QAAQ,CAAS,EAAT,CAAnC;AAEA,QAAMO,eAAe,GAAG,CAAxB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACO,GAAJ,CAAgB,QAAhB,EAA0BC,IAA1B,CAA+BC,QAAQ,IAAI;AAEzCJ,MAAAA,QAAQ,CAACI,QAAQ,CAACC,IAAV,CAAR;AACD,KAHD;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD,GANQ,EAMN,EANM,CAAT;;AAQA,WAASS,gBAAT,CAA0BC,MAA1B,EAAuC,CAEtC;;AAGD,iBAAeC,aAAf,CAA6BC,KAA7B,EAAwD;AACpD,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB;AACD;;AACDD,IAAAA,KAAK,CAACE,cAAN,GAJoD,CAMpD;AACA;AAEA;AACA;AACA;;AAEAf,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AAGH;;AAGD,sBACI;AAAA,4BACA;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,SAAS,EAAC,UAFZ;AAGE,QAAA,WAAW,EAAC,wBAHd;AAIE,QAAA,KAAK,EAAIA,OAJX;AAKE,QAAA,QAAQ,EAAGiB,CAAC,IAAIhB,UAAU,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAL5B;AAME,QAAA,SAAS,EAAKF,CAAD,IAAOJ,aAAa,CAACI,CAAD,CANnC,CAQE;AACA;;AATF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAeA;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA,8BACF;AACC,QAAA,EAAE,EAAC,YADJ;AAEC,QAAA,SAAS,EAAC,YAFX;AAGC,QAAA,IAAI,EAAC,UAHN,CAIC;;AAJD;AAAA;AAAA;AAAA;AAAA,cADE,eAOF;AACC,QAAA,OAAO,EAAC;AADT;AAAA;AAAA;AAAA;AAAA,cAPE,eAUF;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBACUf,KAAK,CAACkB,GAAN,CAAWC,IAAI,iBAAI;AAAA,oBAAmBA,IAAI,CAACC;AAAxB,WAASD,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA,gBAAnB;AADV;AAAA;AAAA;AAAA;AAAA,cAVE;AAAA;AAAA;AAAA;AAAA;AAAA,YAfA;AAAA,kBADJ;AAqCH,CA7ED,C,CAgFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GApGMxB,S;;KAAAA,S;AAqGN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newTodo, setNewTodo] = useState('');\n    const [ todos, setTodos] = useState<Todo[]>([]) ;\n\n    const activeTodoCount = 0;\n\n    useEffect(() => {\n      api.get<Todo[]>('/tasks').then(response => {\n        \n        setTodos(response.data)\n      }); \n      console.log(todos)\n    }, [])\n\n    function handleSubmitTodo(evente: any) {\n\n    }\n\n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return;\n        }\n        event.preventDefault();\n\n        // api.post('/tasks', {title: event.target.value, completed: false }).then( response => {\n        //   const todo = response.data;\n\n        //   setTodos([...todos, todo]);\n        //   console.log(todos);\n        // });\n\n        setNewTodo(\"\")\n        console.log(newTodo);\n\n       \n    }\n\n\n    return ( \n        <>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value = {newTodo}\n            onChange={ e => setNewTodo(e.target.value)}\n            onKeyDown = {(e) => handleNewTodo(e)}\n            \n            // onKeyDown={ e => (e) }\n            // autoFocus={true}\n          />\n        </header>\n        <section className=\"main\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"toggle-all\"\n\t\t\t\t\t\t\tclassName=\"toggle-all\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t// checked={activeTodoCount === 0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\thtmlFor=\"toggle-all\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ul className=\"todo-list\">\n              { todos.map( todo => <li key={todo.id}>{todo.title}</li> )}\n\t\t\t\t\t\t\t{/* {todoItems} */}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\n        {/* <ul >\n        </ul> */}\n        \n      </>\n    )\n}\n \n        \n// <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}