{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [newTodo, setNewTodo] = useState('');\n  const [todos, setTodos] = useState([]);\n  const activeTodoCount = 0;\n  useEffect(() => {\n    api.get('/tasks').then(response => {\n      setTodos(response.data);\n    });\n    console.log(todos);\n  }, []);\n\n  async function handleNewTodo(event) {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    event.preventDefault();\n    api.post('/tasks', {\n      title: event.target.value,\n      completed: false\n    }).then(response => {\n      const todo = response.data;\n      setTodos([...todos, todo]);\n      console.log(todos);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"todoapp\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"newField\",\n        className: \"new-todo\",\n        placeholder: \"What needs to be done?\",\n        onKeyDown: e => handleNewTodo(e) // onKeyDown={ e => (e) }\n        // autoFocus={true}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\" // onChange={this.toggleAll}\n        ,\n        checked: activeTodoCount === 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"todo-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"toggle\",\n              type: \"checkbox\",\n              checked: true // onChange={this.props.onToggle}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"destroy\" // onClick={this.props.onDestroy} \n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: \"editField\",\n            className: \"edit\" // value={this.state.editText}\n            // onBlur={this.handleSubmit}\n            // onChange={this.handleChange}\n            // onKeyDown={this.handleKeyDown}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; // <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\n\n\n_s(Dashboard, \"QPUln2XIDroAIiaRzTKxcWl3r9I=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/guilherme/Documents/desafio-bright-cities/todo-react/src/pages/Dashboard/index.tsx"],"names":["React","useEffect","useState","api","Dashboard","newTodo","setNewTodo","todos","setTodos","activeTodoCount","get","then","response","data","console","log","handleNewTodo","event","key","preventDefault","post","title","target","value","completed","todo","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport api from '../../services/api';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Dashboard: React.FC = () => {\n\n    const [newTodo, setNewTodo] = useState('');\n    const [ todos, setTodos] = useState<Todo[]>([]) ;\n\n    const activeTodoCount = 0;\n\n    useEffect(() => {\n      api.get<Todo[]>('/tasks').then(response => {\n        \n        setTodos(response.data)\n      }); \n      console.log(todos)\n    }, [])\n\n\n    async function handleNewTodo(event: any): Promise<void> {\n        if (event.key !== 'Enter') {\n          return;\n        }\n        event.preventDefault();\n\n        api.post('/tasks', {title: event.target.value, completed: false }).then( response => {\n          const todo = response.data;\n\n          setTodos([...todos, todo]);\n          console.log(todos);\n        });\n\n\n       \n    }\n\n\n    return ( \n        <>\n        <header className=\"todoapp\">\n          <h1>todos</h1>\n          <input\n            id=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown = {(e) => handleNewTodo(e)}\n            \n            // onKeyDown={ e => (e) }\n            // autoFocus={true}\n          />\n        </header>\n        <section className=\"main\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"toggle-all\"\n\t\t\t\t\t\t\tclassName=\"toggle-all\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t// onChange={this.toggleAll}\n\t\t\t\t\t\t\tchecked={activeTodoCount === 0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\thtmlFor=\"toggle-all\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ul className=\"todo-list\">\n              <li className=\"todo-list\">\n              <div className=\"view\">\n                <input\n                  className=\"toggle\"\n                  type=\"checkbox\"\n                  checked={true}\n                  // onChange={this.props.onToggle}\n                />\n                {/* <label onDoubleClick={this.handleEdit}>\n                  {this.props.todo.title}\n                </label> */}\n                <button className=\"destroy\" \n                        // onClick={this.props.onDestroy} \n                />\n              </div>\n              <input\n                ref=\"editField\"\n                className=\"edit\"\n                // value={this.state.editText}\n                // onBlur={this.handleSubmit}\n                // onChange={this.handleChange}\n                // onKeyDown={this.handleKeyDown}\n              />\n              </li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\n        {/* <ul >\n        </ul> */}\n        \n      </>\n    )\n}\n \n        \n// <section className=\"main\">\n// <input\n//   id=\"toggle-all\"\n//   className=\"toggle-all\"\n//   type=\"checkbox\"\n// //   onChange={ e => this.toggleAll(e) }\n// //   checked={activeTodoCount === 0}\n// />\n// <label\n//   htmlFor=\"toggle-all\"\n// >\n//   Mark all as complete\n// </label>\n//   {\n//     todos.map( todo => {\n//       <ul className=\"todo-list\">\n//        <li key={todo.id} className=\"li.completed\" >{todo.title}</li>\n//       </ul>\n//     })\n//   }\n// </section>\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}